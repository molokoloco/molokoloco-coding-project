#summary Personal Tooltips for Javascript
#labels Tooltips

*Sommaire :*

<wiki:toc max_depth="3" />


==JAVASCRIPT RELATED LINKS==

Good advices here : 

  * https://developer.mozilla.org/en/JavaScript/Reference/
  * http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml
  * http://bonsaiden.github.com/JavaScript-Garden/
  * https://developer.mozilla.org/en/Introduction_to_Object-Oriented_JavaScript
  * http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml?showone=Tips_and_Tricks
  * http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/
  * http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth
  * http://addyosmani.com/blog/tools-for-jquery-application-architecture-the-printable-chart/
  * http://www.timmywillison.com/pres/operators/
  * http://javascriptweblog.wordpress.com/2010/08/30/understanding-javascripts-this/
  * http://engineering.socialcast.com/2011/06/javascript-memory-management/
  * http://code.google.com/p/jslibs/wiki/JavascriptTips#language_advanced_Tips_&_Tricks


== OPERATOR && COMPARAISONS ==

  * Arithmetic : +, -, *, /, %, ++, --, unary -, unary +
  * Assignment : =, *=, /=, %=, +=, -=, <<=, >>=, >>>=, &=, ^=, |=
  * Bitwise : &, |, ^, ~, <<, >>, >>>
  * Comparison : ==, !=, ===, !==, >, >=, <, <=
  * Logical : &&, ||, !
  * String : + and +=

{{{
var i = 0;
alert(i++);

var foo = "baz",
    checkFoo = foo.indexOf("bar");

if ( checkFoo !== -1 ) {}
// We can do
if ( ~checkFoo ) {}
}}}

== REGEX ==

  * http://code.google.com/p/molokoloco-coding-project/wiki/RegexSyntax

{{{

alert('10 13 21 48 52'.replace(/d+/g, '*')); //replace all numbers with *

alert('10 13 21 48 52'.replace(/d+/g, function(match) {
	return parseInt(match) < 30 ? '*' : match;
}));

alert(/w{3,}/.test('Hello')); //alerts 'true'

function findWord(word, string) {
	var instancesOfWord = string.match(new RegExp('\b'+word+'\b', 'ig'));
	alert(instancesOfWord);
}
findWord('car', 'Carl went to buy a car but had forgotten his credit card.');

}}}

== ITERATIONS==

{{{
var arr = ['va1', 'val2', 300];
for (var index in arr) alert(index+' : '+arr[index]);

var obj = {'x':200, 'y': 300, 'color':'white'};
for (var key in obj) alert(key+' : '+obj[key]);

// Node lists are often implemented as node iterators with a filter. 
// This means that getting a property like length is O(n), 
// and iterating over the list by re-checking the length will be O(n^2).

var paragraphs = document.getElementsByTagName('p');
for (var i = 0; i < paragraphs.length; i++) {
  doSomething(paragraphs[i]);
}

// It is better to do this instead:
// This works well for all collections and arrays as long as the array 
// does not contain things that are treated as boolean false.

var paragraphs = document.getElementsByTagName('p');
for (var i = 0, paragraph; paragraph = paragraphs[i]; i++) {
  doSomething(paragraph);
}
}}}

Generator Expressions - JavaScript 1.7

{{{
[ y for ( y in [5,6,7,8,9] ) ] // is [0,1,2,3,4]
// and
[ y for each ( y in [5,6,7,8,9] ) ] // is [5,6,7,8,9]
// Because in for extracts index names, and for each extracts the values

[1, 2, 3].forEach(function(item) { alert(item) });

var squares = [item * item for each (item in [1, 2, 3])];

[alert(item) for each (item in [1, 2, 3])];

var obj = { foo: 1, bar: 2, baz: 3 };
[alert(name + "=" + obj[name]) for (name in obj)];

[alert(key + "=" + val) for ([key, val] in Iterator({a:1,b:2,c:3}))]

}}}

== DATA OBJECTS ==

{{{
var intkeys = ['val1', 'val2'];

var obj1 = {x: 10, y: 3};

var elements = 'div a p quote all tags'.split(' ');

var obj2 = {'Point Kiukiu': [{to: 'Hanaiapa', distance: 19}, {to: 'Mt Feani', distance: 15}, {to: 'Taaoa', distance: 15}],
            'Taaoa': []};

typeof 'abc'; // string
typeof String('abc'); // string
typeof new String('abc'); // object
typeof (new String('abc')).valueOf(); // string

if ('a' in {a: 1, b: 2}) // true


// Sorting multi-Array...
var shapes = [
    [5, 'Pentagon'],
    [3, 'Triangle'],
    [8, 'Octagon'],
    [4, 'Rectangle']
];
shapes.sort(function(a, b) { return a[1] - b[1]; });

// Sorting complex object
var movies = [
    {id:5, title:'Pentagon'},
    {id:3, title:'Triangle'}
];
var objSortByTitle = function (a, b) { var x = a.title.toLowerCase(); var y = b.title.toLowerCase(); return ((x < y) ? -1 : ((x > y) ? 1 : 0)); };

movies.sort(objSortByTitle);

// Remove an item by value in an Array object
var arr = ['a', 'b', 'c', 'd'];
var pos = arr.indexOf( 'c' );
pos > -1 && arr.splice( pos, 1 );
Print( arr ); // prints: a,b,d

// indexOf() and lastIndexOf() Works on Array (JavaScript 1.6)
var obj = {};
var arr = [ 'foo', 567, obj, 12.34 ];
Print( arr.indexOf(obj) ); // prints: 2

//Insert an array in another array
var a = [1,2,3,7,8,9]
var b = [4,5,6]
var insertIndex = 3;
a.splice.apply(a, Array.concat(insertIndex, 0, b));
Print(a); // prints: 1,2,3,4,5,6,7,8,9
}}}

== FUNCTIONS ==

{{{
// Function Declarations
function a() {
    return 3;
}

// Anonymous function expression
var a = function() {
    return 3;
}

// Named function expression
var a = function bar() {
    return 3;
}

// Self invoking function expression
(function sayHello() {
    alert("hello!");
})();

// Modular closure augmented
var MODULE = (function () {
    var my = {}, 
        privateVariable = 1; 
     
    function privateMethod() { 
       my.size = {w:320, h:240};
       // ... 
    } 
    
    my.moduleProperty = 1; 
    my.moduleMethod = function () { 
        // ... 
    }; 
     
    return my; 
}(MODULE || {}));


// Multiple-value returns (JavaScript 1.7)
function f() { return [1, 2]; }
var [a, b] = f();
}}}

== FUNCTIONS on functions ==

{{{
var value = myFunction.apply(this, args);

var db = function(){ 'console' in window && console.log.call(console, arguments) };


function(a, b){
    var args = msg ? ' (' + [].join.call( arguments, ', ' ) + ')' : '';
    $('body').append( '<br/>' + msg + args );
}

// run the code, if any inside of the script tag that included this script.
var scripts = document.getElementsByTagName("script");
eval.call(window, scripts[scripts.length - 1].innerHTML); 

var i, hasOwn = Object.prototype.hasOwnProperty;  
for (i in man) if (hasOwn.call(man, i)) { // filter only this object properties
    console.log(i, ":", man[i]);  
}  
}}}

== OBJECTS ORIENTED PROGRAMMING ==

inspired from Angus Croll http://javascriptweblog.wordpress.com/2010/03/16/five-ways-to-create-objects/
{{{

// 1. Simple Object Literal
var rabbit = {};
var rabbit.run = true;
rabbit.speak = function(s) {
    print("The rabbit says '", s, "'");
};

rabbit.speak("Well, now you're asking me.");

// 2. Nested Object Literal
myApp.notepad  = {
    writeable: true,
    font: 'helvetica',
    setFont: function(theFont) {
        this.font = theFont;
    }
}

// 3. Constructor using Object Literal
myApp.Notepad = function(defaultFont) {
    var  that = {};
    that.writeable = true;
    that.font = defaultFont;
    that.setFont = function(theFont) {
        that.font = theFont;
    }
    return that;
}

myApp.notepad1 =  myApp.Notepad('helvetica');

// 4. Simple Constructor for new
myApp.Notepad = function(defaultFont) {
    this.writeable = true;
    this.font = defaultFont;
    this.setFont = function(theFont) {
        this.font = theFont;
    }
}

myApp.notepad1 = new myApp.Notepad('helvetica');

// 5. Prototype with Constructor for new
// Extending functionality to the pre-built string() object
String.prototype.writeback = function() {
    for (i=this.length-1;i>=0;i--)
    document.write(this.charAt(i))
};

var test = "Welcome to my site!";
test.writeback();

// Extending functionality to the pre-built object() object
Object.prototype.properties = function() {
  var result = [];
  for (var property in this) result.push(property);
  return result;
};

var test = {x: 10, y: 3};
console.log(test.properties());

// Extending functionality to a custom JavaScript object
myApp.Notepad = function(defaultFont) {
    this.font = defaultFont;
}
myApp.Notepad.prototype.writeable  = true;
myApp.Notepad.prototype.setFont = function(theFont) {
    this.font = theFont;
}
myApp.notepad1  = new myApp.Notepad('helvetica');
myApp.notepad1.setFont('arial');
}}}

== CLOSURE ==

{{{

// You don’t need to make a separate counter object and call its
// increment method (as you would in Java) – just make a function
// that has private state through its closure

var counter = function () {
  var i = 0;
  return function () {
    i++;
    return i;
  };
};

counter(); //returns 1
counter(); //returns 2

// Idem

var counter = (function (i) {
  return function counter () { return ++i }
})(0);

}}}


== SINGLETON PATERN ==

{{{
// http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/

var SingletonTester = (function(){
 
  //args: an object containing arguments for the singleton
  function Singleton(args) {
 
   //set args variable to args passed or empty object if none provided.
    var args = args || {};
    //set the name parameter
    this.name = 'SingletonTester';
    //set the value of pointX
    this.pointX = args.pointX || 6; //get parameter from arguments or set default
    //set the value of pointY
    this.pointY = args.pointY || 10;  
 
  }
   
 //this is our instance holder
  var instance;
 
 //this is an emulation of static variables and methods
  var _static = {
    name: 'SingletonTester',
   //This is a method for getting an instance
 
   //It returns a singleton instance of a singleton object
    getInstance: function (args){
      if (instance === undefined) {
        instance = new Singleton(args);
      }
      return instance;
    }
  };
  return _static;
})();
 
var singletonTest = SingletonTester.getInstance({pointX: 5});
console.log(singletonTest.pointX); // outputs 5
}}}

== PROTOTYPE INHERANCE ==

{{{
// Employee inherit from human... the custom way

// Define Human class
function Human() {
    this.setName = function (fname, lname) {
        this.fname = fname;
        this.lname = lname;
    }
    this.getFullName = function () {
        return this.fname + " " + this.lname;
    }
}
 
// Define the Employee class
function Employee(num) {
    this.getNum = function () {
        return num;
    }
};
// Let Employee from Human
Employee.prototype = new Human();
 
// Instantiate an Employee object
var john = new Employee("4815162342");
john.setName("John", "Doe");
alert(john.getFullName() + "'s employee number is " + john.getNum());
}}}

== PROTOTYPE OBSERVER IMPLEMENTATION ==

From [http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/]
{{{
function Observer(){
    this.functions = [];
}

Observer.prototype = {
    subscribe : function(fn) {
        this.functions.push(fn);
    },
    
    unsubscribe : function(fn) {
        this.functions = this.functions.filter(
            function(el) {
                if ( el !== fn ) {
                    return el;
                }
            }
        );
    },
    
    update : function(o, thisObj) {
        var scope = thisObj || window;
        this.functions.forEach(
            function(el) {
                el.call(scope, o);
            }
        );
    }
};

// Subscribing and publishing

// Publishers are in charge of "publishing" eg: Creating the Event
// They're also in charge of "notifying" (firing the event)
var obs = new Observer;
obs.update('here is some test information');

// Subscribers basically... "subscribe" (or listen)
// And once they've been "notified" their callback functions are invoked
var fn = function() {
    // my callback stuff
};
obs.subscribe(fn);

// Unsubscribe if you no longer wish to be notified
obs.unsubscribe(fn);
}}}

== THIS is what ? ==

{{{
var a = {
    b: function() {
        return this;
    }
};

// Invoke a property
a.b(); // a

var c = {};
c.d = a.b;
c.d(); // c

// Invoke a variable
var foo = a.b;
foo(); // window

// Invoke using Function.prototype.apply
a.b.apply(d); // d

// Invoke from a variable
var a = {
    b: function() {
        var c = function() { return this; }
        return c();
    }
};

a.b(); //window

// The same applies to self invoking functions
var a = {
    b: function() {
        return (function() { return this; })()
    }
};

a.b(); //window
}}}

== Stats analytics de manière asynchrone==

{{{

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-XXXXX-X']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script');
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    ga.setAttribute('async', 'true');
    document.documentElement.firstChild.appendChild(ga);
  })();

}}}


==Simulate threads==

 using yield operator (JavaScript 1.7)

{{{
//// thread definition
function Thread( name ) {
    for ( var i = 0; i < 5; i++ ) {
        Print(name+': '+i);
        yield;
    }
}

//// thread management
var threads = [];

// thread creation
threads.push( new Thread('foo') );
threads.push( new Thread('bar') );

// scheduler
while (threads.length) {
    var thread = threads.shift();
    try {
        thread.next();
        threads.push(thread);
    } catch(ex if ex instanceof StopIteration) {}
}
}}}

prints :

foo: 0
bar: 0
foo: 1
bar: 1
foo: 2
bar: 2
foo: 3
bar: 3
foo: 4
bar: 4

== STRINGS ==

{{{
Chaine.anchor("nom_a_donner"); Transforme le texte Chaine en ancrage HTML.
Chaine.big() Augmente la taille de la police.
Chaine.blink() Transforme la chaîne en texte clignotant.
Chaine.bold() Met le texte en gras (balise <B>).
Chaine.charAt(position) Retourne le caractère situé à la position donnée en paramètre
Chaine.charCodeAt(position) Renvoie le code Unicode du caractère situé à la position donnée en paramètre
concat(chaîne1, chaîne2[, ...]) Permet de concaténer les chaînes passées en paramètre, c est-à-dire de les joindre bout à bout.
Chaine.fixed() Transforme la Chaine en caractères de police fixe (balise <TT>)
Chaine.fontcolor(couleur) Modifie la couleur du texte (admet comme argument la couleur en hexadécimal ou en valeur littérale)  
Chaine.fontsize(Size) Modifie la taille de la police, en afectant la valeur passée en paramètre
Chaine.fromCharCode(code1[, code2, ..]) Renvoie une chaîne de caractères composée de caractères correspondant au(x) code(s) Unicode donné(s) en paramètre.
Chaine.indexOf(sous-chaîne, position) Retourne la position d une sous-chaîne (lettre ou groupe de lettres) dans une chaîne de caractère, en effectuant la recherche de gauche à droite, à partir de la position spécifiée en paramètre.
Chaine.italics() Transforme le texte en italique (balise <I>)
Chaine.lastIndexOf(sous-chaîne, position) La méthode est similaire à indexOf(), à la différence que la recherche se fait de droite à gauche:
Retourne la position d une sous-chaîne (lettre ou groupe de lettres) dans une chaîne de caractère, en effectuant la recherche de droite à gauche, à partir de la position spécifiée en paramètre.
Chaine.link(URL) Transforme le texte en hypertexte (balise <A href>)
Chaine.small() Diminue la taille de la police
Chaine.strike() Transforme le texte en texte barré (balise <strike>)
Chaine.sub() Transforme le texte en indice (balise <sub>)
Chaine.substr(position1, longueur) La méthode retourne une sous-chaîne commençant à l index dont la position est donnée en argument et de la longueur donnée en paramètre.
Chaine.substring(position1, position2) La méthode retourne la sous-chaîne (lettre ou groupe de lettres) comprise entre les positions 1 et 2 données en paramètre.
Chaine.sup() Transforme le texte en exposant (balise <sup>).
Chaine.toLowerCase() Convertit tous les caractères d une chaîne en minuscule.
Chaine.toSource() Renvoie le code source de création de l objet.
Chaine.toUpperCase() Convertit tous les caractères d une chaîne en majuscule.
Chaine.valueOf() Renvoie la valeur de l objet String.
}}}
  
== Built-In Functions ==

{{{
escape()     Many special characters cause problems when submitting information to a 0CGI server. These characters include $ # ! spaces and tabs. An example of a safely encoded string is coded = escape('& '). [returns "%26%20"]. See also unescape.
eval()     Evaluates a string and returns a numeric value. An example is eval(x) + eval(y); If x and y are strings '1' and '2' the result is three. Without the eval function the value would be 12!
isFinite()     Tests whether the variable is a finite number. Returns false if contents is not a number or is infinite. An example of usage is flag = isFinite(var_name);
isNaN()     Tests whether the variable is not a number. Returns true if contents is not a decimal based number. An example of usage is flag = isNaNum(var_name);
Number()     Converts the object argument to a number representing the object s value. If the value cannot be represented by a legitimate number, the "Not-a-Number" value, NaN is returned.Note the inconsistency in case!!
parseFloat()     Turns a string into a floating-point number. If the first character can t be converted the result is NaN. Otherwise the conversion stops at first character that can t be converted. The function is decimal base only! an example of usage is n = parseFloat('23.45');
parseInt()     Turns a string into an integer number. If the first character can t be converted the result is NaN. Otherwise the conversion stops at first character that can t be converted. If a second parameter is included, the numeric base can be binary, octal, decimal or hexadecimal. An example is n = parseInt('55',10); which places the number 55 into the base 10 variable n.
unescape()     Recovers an escaped string. An example is decoded = unescape('%26%20') [returns "& "].

new     Creates a copy or instance of an object for use or modification within a program. For example now = new Date; creates a Date object called now that can be affected by all the Date properties and methods. Technically new is an operator but it works very much like a function!
this     A shorthand convention to allow working with the current object method without naming it. This is used to save retyping a method name.
with     A shorthand convention to allow working with the current object without naming it. This is used to save retyping a long object name. An example is:

with (document) {
	writeln(lastmodified);
	writeln(location);
	writeln(title);
}

}}}

==Objects Functions==

  * Array Object
    * properties - constructor, length, prototype
    * methods - concat(), join(), pop(), push(), reverse(), shift(), slice(), sort(), splice(), toLocaleString(), toString(), unshift(), valueOf()
  * Boolean Object
    * properties - constructor, prototype
    * methods - toString(), valueOf()
  * Date Object
    * properties - constructor, prototype
    * methods - getDate(), getDay(), getFullYear(), getHours(), getMilliseconds(), getMinutes(), getMonth(), getSeconds(), getTime(), getTimeZoneOffset(), getUTCDate(), getUTCDay(), getUTCFullYear(), getUTCHours(), getUTCMilliseconds(), getUTCMinutes(), getUTCMonth(), getUTCSeconds(), getVarDate(), getYear(), parse(), setDate(), setFullYear(), setHours(), setMilliseconds(), setMinutes(), setMonth(), setSeconds(), setTime(), setUTCDate(), setUTCFullYear(), setUTCHours(), setUTCMilliseconds(), setUTCMinutes(), setUTCMonth(), setUTCSeconds(), setUTCTime(), setUTCYear(), setYear(), toLocaleString(), toUTCString(), toString(), UTC(), valueOf()
  * Error Object
    * properties - description, number
    * methods -
  * Function Object
    * properties - arguments[], caller, constructor, prototype
    * methods - toString(), valueOf()
  * Global Object
    * properties - Infinity, NaN, undefined
    * methods - escape(), eval(), isFinite(), isNaN(), parseFloat(), parseInt(), unescape()
  * Math Object
    * properties - E, LN10, LN2, LOG10E, LOG2E, PI, SQRT2, SQRT1_2
    * methods - abs(), acos(), asin(), atan(), atan2(), ceil(), cos(), exp(), floor(), log(), max(), min(), pow(), random(), round(), sin(), sqrt(), tan()
  * Number Object
    * properties - MAX_VALUE, MIN_VALUE, NaN, NEGATIVE _INFINITY, POSITIVE_INFINITY, constructor, prototype
    * methods - toLocaleString(), toString(), valueOf()
  * Object Object
    * properties - constructor, prototype
    * methods - toLocaleString(), toString(), unwatch(), valueOf(), watch()
  * RegExp Object
    * properties - $1 - $9, index, input, lastIndex, lastMatch, lastParen, leftContext, rightContext
  * String Object
    * properties - constructor, length, prototype
    * display methods - anchor(), big(), blink(), bold(), fixed(), fontcolor(), fontsize(), italics(), small(), strike(), sub(), sup()
    * manipulation methods - charAt(), charCodeAt(), concat(), fromCharCode(), indexOf(), lastIndexOf(), link(), match(), replace(), search(), slice(), split(), substr(), substring(), toLowerCase(), toUpperCase(), toString(), valueOf()

   * Document Object - Primary Output
    * content properties - anchors[], applets[], embeds[], forms[], images[], links [], plugins[]
    * display properties - alinkColor, bgColor, fgColor, linkColor, vlinkColor
    * information properties - cookie, domain, lastModified, location, mimeTypes, referrer, title, URL
    * methods - open(), write(), writeln()
  * Form Objects - Primary Input
    * form properties - name, target, action, method, encoding, elements, length
    * form methods - submit(), reset()
    * button, hidden, reset, and submit object properties - name, value, type
    * checkbox properties - name, value, type, checked, default checked
    * password properties - name, value, type, default value
    * radio button properties - name, value, type, checked, default checked, length
    * select properties - name, value, type, length, options, defaultSelected, index, selected, selectedIndex
    * text, textarea properties - name, value, defaultvalue
    * input, textarea and select methods - focus(), blur(), select()
  * History Object - Access the browser s history file
    * properties - length
    * methods - back(), forward(), go()
  * Location Object
    * properties - hash, hostname, href, pathname, port, protocol, search
    * methods - reload(), replace()
  * Navigator Object - Root of all Objects
    * properties - appCodeName, appName, appVersion, platform, userAgent
    * methods - javaEnabled()
  * Window Object
    * properties - defaultStatus, frames, length, name, opener, parent, self, status, top, window
    * methods - alert(), blur(), clearInterval(), clearTimeout(), close(), confirm(), focus(), open(), print(), prompt(), scroll(), setInterval(), setTimeout(), timeoutID()
    * contained objects -
      * Screen Object
      * properties - availHeight, availLeft, availTop, availWidth, colorDepth, height, pixelDepth, width


== HANDLERs ==

Interface Event Handlers:

  * onBlur [window, frame, select, text, textarea]     focus is lost (ie. changed or blurred) to a new element.
  * onFocus [window, frame, select, text, textarea]     object gains focus. aka anti-blur!
  * onLoad [window, frame, image]     window, complete frame or image(s) finishes loading.
  * onResize     a window or object(MSIE only) is resized.
  * onScroll     window scrolled with scrollbar or mousewheel.
  * onUnload [window, frame]     window or all windows in a frame have been exited.

Key Event Handlers:

  * nHelp     GUI F1 key pressed. Used to override browser Help.
  * onKeydown     alphanumeric key is pressed.
  * onKeypress     alphanumeric key is fully pressed/released.
  * onKeyup     alphanumeric key is released.
  * onStop     GUI STOP key is pressed or user leaves page.

Mouse Event Handlers:

  * Event Name     Handler Executes When
  * onClick [clickable form element]     left mouse clicks om element. Can be stopped if executing
  * procedure (such as validation) returns a false signal.
  * onContextmenu     right mouse button clicked.
  * onDblclick     mouse button is double-clicked.
  * onMousedown     either mouse button is clicked.
  * onMousemove     mouse is moved.
  * onMouseOut [link, area]     cursor leaves a link or area.
  * onMouseOver [link, area]     cursor enters a link or area.
  * 
Form Event Handlers:

  * Event Name     Handler Executes When
  * onChange [select, text, textarea]     last element has been changed before focus change.
  * onReset [form]     the reset button is clicked.
  * onSelect [text, textarea]     some text is highlighted in either of these form boxes.
  * onSubmit [form]     Executes after return key is pressed or submit button is clicked.
  * Allows bailout similar to the onclick event. Failure in validation
  * routine is the most common reason for bailout.
  * 
Miscellaneous Event Handlers:

  * Event Name     Handler Executes When
  * onAbort [image]     image load has been abandoned by hitting the STOP icon.
  * onError [window, image]     window or image fails to load.

== Various ==

{{{

// No need to remove the child text node, as the garbage collector (GC memory manager) will.
String.prototype.EntityDecode = function() {
    var t = document.createElement('div');
    t.innerHTML = this;
    return t.firstChild.nodeValue;
}
var hello = "Hello Jos&eacute;";
alert(hello.unescapeHtml());
}}}

== Et le meilleur pour la fin ;) ==

{{{

// Pour debugger X variables dans la console du navigateur...
// "Ctrl + Maj + C" pour ouvrir la console

var db = function() { 'console' in window && console.log.call(console, arguments); };

db('Test', window);

// Well ok, somebody got better ^^ // http://html5boilerplate.com/
window.log = function(){
  log.history = log.history || [];  
  log.history.push(arguments);
  arguments.callee = arguments.callee.caller;  
  if(this.console) console.log( Array.prototype.slice.call(arguments) );
};
(function(b){function c(){}for(var d="assert,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,markTimeline,profile,profileEnd,time,timeEnd,trace,warn".split(","),a;a=d.pop();)b[a]=b[a]||c})(window.console=window.console||{});

}}}